name: Deploy to Amazon ECS

on:
  push:
    branches:
      - '*'

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  EC2_INSTANCE_IP: 3.90.18.171        # set this to the public IP or DNS of your EC2 instance
  EC2_INSTANCE_USER: ec2-user             # set this to the username for connecting to your EC2 instance
  DOCKER_IMAGE_NAME: malaria-app           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.x

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt

    - name: Run Unit Tests
      run:
        python3 -m unittest backend/tests/test_app.py

    - name: Set up AWS credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build Docker Image
      run: |
        cd backend
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .

    - name: Deploy to EC2
      run: |
        # Copy the Docker image to the EC2 instance
        scp -i ${{ secrets.EC2_PRIVATE_KEY }} -o StrictHostKeyChecking=no -r backend/ ${{ env.EC2_INSTANCE_USER }}@${{ env.EC2_INSTANCE_IP }}:/home/${{ env.EC2_INSTANCE_USER }}/backend/

        # Connect to the EC2 instance and deploy the Docker image
        #ssh -i ${{ secrets.EC2_PRIVATE_KEY }} -o StrictHostKeyChecking=no ${{ env.EC2_INSTANCE_USER }}@${{ env.EC2_INSTANCE_IP }} << 'EOF'
        #  cd /home/${{ env.EC2_INSTANCE_USER }}/backend
        #  docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
        #  docker run -d -p 80:80 ${{ env.DOCKER_IMAGE_NAME }}:latest
